freer-simple-1.3.0.0: unregistering (local file changes: bench/Core.hs)
Progress 0/2            freer-simple> configure (lib + exe + bench)
Progress 0/2            Configuring freer-simple-1.3.0.0...
Progress 0/2            freer-simple> build (lib + exe + bench)
Progress 0/2            Preprocessing library for freer-simple-1.3.0.0..
Progress 0/2            Building library for freer-simple-1.3.0.0..
Progress 0/2            Preprocessing benchmark 'core' for freer-simple-1.3.0.0..
Progress 0/2            Warning: Enabling workaround for Main module 'Main' listed in 'other-modules'
Progress 0/2            Building benchmark 'core' for freer-simple-1.3.0.0..
Progress 0/2            illegally!
Progress 0/2            [4 of 4] Compiling Main
Progress 0/2            Rule fired: unpack (GHC.Base)
Progress 0/2            Rule fired: unpack (GHC.Base)
Progress 0/2            Rule fired:
Progress 0/2                SPEC/Main $fMembertr @ (State Int) @ '[State Int, Identity] (Main)
Progress 0/2            Rule fired: Class op inj (BUILTIN)
Progress 0/2            Rule fired: SPEC/Main freer @ '[State Int, Identity] (Main)
Progress 0/2            Rule fired: Class op inj (BUILTIN)
Progress 0/2            Rule fired: SPEC/Main freer @ '[State Int, Identity] (Main)
Progress 0/2            Rule fired: Class op $p1Monad (BUILTIN)
Progress 0/2            Rule fired: Class op $p1Applicative (BUILTIN)
Progress 0/2            Rule fired: Class op fmap (BUILTIN)
Progress 0/2            Rule fired: Class op >>= (BUILTIN)
Progress 0/2            Rule fired: Class op return (BUILTIN)
Progress 0/2            Rule fired: Class op $p1Monad (BUILTIN)
Progress 0/2            Rule fired: Class op pure (BUILTIN)
Progress 0/2            Rule fired: Class op >>= (BUILTIN)
Progress 0/2            Rule fired: Class op $p1Monad (BUILTIN)
Progress 0/2            Rule fired: Class op pure (BUILTIN)
Progress 0/2            Rule fired: Class op $p1Monad (BUILTIN)
Progress 0/2            Rule fired: Class op pure (BUILTIN)
Progress 0/2            Rule fired: unpack-list (GHC.Base)
Progress 0/2            Rule fired: unpack-list (GHC.Base)
Progress 0/2            Rule fired: Class op $p1Monad (BUILTIN)
Progress 0/2            Rule fired: Class op >>= (BUILTIN)
Progress 0/2            Rule fired: Class op >>= (BUILTIN)
Progress 0/2            Rule fired: Class op $p1Monad (BUILTIN)
Progress 0/2            Rule fired: Class op $p1Applicative (BUILTIN)
Progress 0/2            Rule fired: SC:$w$sfreer0 (Main)
Progress 0/2            Rule fired: Class op >>= (BUILTIN)
Progress 0/2            Rule fired: Class op >>= (BUILTIN)
Progress 0/2            Rule fired: SC:$w$sfreer0 (Main)
Progress 0/2            Rule fired: SC:$w$sfreer0 (Main)
Progress 0/2            
Progress 0/2            ==================== Tidy Core ====================
Progress 0/2            Result size of Tidy Core
Progress 0/2              = {terms: 120, types: 249, coercions: 84, joins: 0/0}
Progress 0/2            
Progress 0/2            -- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Progress 0/2            main12 :: Addr#
Progress 0/2            main12 = "countDown"#
Progress 0/2            
Progress 0/2            -- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Progress 0/2            main11 :: [Char]
Progress 0/2            main11 = unpackCString# main12
Progress 0/2            
Progress 0/2            -- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Progress 0/2            main14 :: Addr#
Progress 0/2            main14 = "Countdown Bench"#
Progress 0/2            
Progress 0/2            -- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Progress 0/2            main13 :: [Char]
Progress 0/2            main13 = unpackCString# main14
Progress 0/2            
Progress 0/2            -- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
Progress 0/2            main9 :: Applicative (StateT Int Identity)
Progress 0/2            main9 = $fApplicativeStateT $fFunctorIdentity $fMonadIdentity
Progress 0/2            
Progress 0/2            Rec {
Progress 0/2            -- RHS size: {terms: 22, types: 74, coercions: 5, joins: 0/0}
Progress 0/2            $sfreer1
Progress 0/2              :: ((forall x.
Progress 0/2                   Union '[State Int, Identity] x -> Int -> Identity (x, Int))
Progress 0/2                  ~R# (forall x.
Progress 0/2                       Union '[State Int, Identity] x -> StateT Int Identity x))
Progress 0/2                 -> Applicative (StateT Int Identity) => Int -> Identity (Int, Int)
Progress 0/2            $sfreer1
Progress 0/2              = \ (sg
Progress 0/2                     :: (forall x.
Progress 0/2                         Union '[State Int, Identity] x -> Int -> Identity (x, Int))
Progress 0/2                        ~R# (forall x.
Progress 0/2                             Union '[State Int, Identity] x -> StateT Int Identity x))
Progress 0/2                  (sc :: Applicative (StateT Int Identity))
Progress 0/2                  (eta :: Int) ->
Progress 0/2                  case eta of wild { I# x ->
Progress 0/2                  case <=# x 0# of {
Progress 0/2                    __DEFAULT -> $sfreer1 @~ <Co:1> sc (I# (-# x 1#));
Progress 0/2                    1# -> ((pure sc wild) `cast` <Co:4>) wild
Progress 0/2                  }
Progress 0/2                  }
Progress 0/2            end Rec }
Progress 0/2            
Progress 0/2            -- RHS size: {terms: 9, types: 8, coercions: 40, joins: 0/0}
Progress 0/2            main8 :: Int -> Identity (Int, Int)
Progress 0/2            main8
Progress 0/2              = \ (w :: Int) ->
Progress 0/2                  case ($sfreer1 @~ <Co:31> main9 w) `cast` <Co:4> of { (a1, b1) ->
Progress 0/2                  (b1, a1) `cast` <Co:5>
Progress 0/2                  }
Progress 0/2            
Progress 0/2            -- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Progress 0/2            $trModule4 :: Addr#
Progress 0/2            $trModule4 = "main"#
Progress 0/2            
Progress 0/2            -- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Progress 0/2            $trModule3 :: TrName
Progress 0/2            $trModule3 = TrNameS $trModule4
Progress 0/2            
Progress 0/2            -- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
Progress 0/2            $trModule2 :: Addr#
Progress 0/2            $trModule2 = "Main"#
Progress 0/2            
Progress 0/2            -- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Progress 0/2            $trModule1 :: TrName
Progress 0/2            $trModule1 = TrNameS $trModule2
Progress 0/2            
Progress 0/2            -- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Progress 0/2            $trModule :: Module
Progress 0/2            $trModule = Module $trModule3 $trModule1
Progress 0/2            
Progress 0/2            -- RHS size: {terms: 11, types: 12, coercions: 0, joins: 0/0}
Progress 0/2            main10 :: (Int, Int) -> ()
Progress 0/2            main10
Progress 0/2              = \ (ds :: (Int, Int)) ->
Progress 0/2                  case ds of { (x, y) ->
Progress 0/2                  case x of { I# ipv -> case y of { I# ipv1 -> () } }
Progress 0/2                  }
Progress 0/2            
Progress 0/2            -- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
Progress 0/2            main_x :: Int
Progress 0/2            main_x = I# 10000#
Progress 0/2            
Progress 0/2            -- RHS size: {terms: 9, types: 8, coercions: 8, joins: 0/0}
Progress 0/2            main7
Progress 0/2              :: () -> Int64 -> State# RealWorld -> (# State# RealWorld, () #)
Progress 0/2            main7
Progress 0/2              = \ _ (eta :: Int64) (eta1 :: State# RealWorld) ->
Progress 0/2                  ((nf' main10 (main8 `cast` <Co:6>) main_x eta) `cast` <Co:2>) eta1
Progress 0/2            
Progress 0/2            -- RHS size: {terms: 6, types: 1, coercions: 22, joins: 0/0}
Progress 0/2            main6 :: Benchmarkable
Progress 0/2            main6
Progress 0/2              = Benchmarkable
Progress 0/2                  (nf3 `cast` <Co:3>)
Progress 0/2                  (nf2 `cast` <Co:5>)
Progress 0/2                  (nf1 `cast` <Co:7>)
Progress 0/2                  (main7 `cast` <Co:7>)
Progress 0/2                  False
Progress 0/2            
Progress 0/2            -- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Progress 0/2            main5 :: Benchmark
Progress 0/2            main5 = Benchmark main11 main6
Progress 0/2            
Progress 0/2            -- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
Progress 0/2            main4 :: [Benchmark]
Progress 0/2            main4 = : main5 []
Progress 0/2            
Progress 0/2            -- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Progress 0/2            main3 :: Benchmark
Progress 0/2            main3 = BenchGroup main13 main4
Progress 0/2            
Progress 0/2            -- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
Progress 0/2            main2 :: [Benchmark]
Progress 0/2            main2 = : main3 []
Progress 0/2            
Progress 0/2            -- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
Progress 0/2            main1 :: State# RealWorld -> (# State# RealWorld, () #)
Progress 0/2            main1 = defaultMain2 defaultConfig main2
Progress 0/2            
Progress 0/2            -- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
Progress 0/2            main :: IO ()
Progress 0/2            main = main1 `cast` <Co:3>
Progress 0/2            
Progress 0/2            -- RHS size: {terms: 2, types: 1, coercions: 3, joins: 0/0}
Progress 0/2            main15 :: State# RealWorld -> (# State# RealWorld, () #)
Progress 0/2            main15 = runMainIO1 (main1 `cast` <Co:3>)
Progress 0/2            
Progress 0/2            -- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
Progress 0/2            main :: IO ()
Progress 0/2            main = main15 `cast` <Co:3>
Progress 0/2            
Progress 0/2            
Progress 0/2            
Progress 0/2            Linking .stack-work/dist/x86_64-linux/Cabal-3.0.1.0/build/core/core ...
Progress 0/2            Preprocessing executable 'freer-examples' for freer-simple-1.3.0.0..
Progress 0/2            Building executable 'freer-examples' for freer-simple-1.3.0.0..
Progress 0/2            freer-simple> copy/register
Progress 0/2            Installing library in /home/haskeller/dev/freer-simple/.stack-work/install/x86_64-linux/93f93f6b9ae4605159edf6ce1aed22b6aefc0d643739b84df5eded1ff4b4a890/8.8.4/lib/x86_64-linux-ghc-8.8.4/freer-simple-1.3.0.0-vtMP9aex7U5yKGsbdKiM9
Progress 0/2            Installing executable freer-examples in /home/haskeller/dev/freer-simple/.stack-work/install/x86_64-linux/93f93f6b9ae4605159edf6ce1aed22b6aefc0d643739b84df5eded1ff4b4a890/8.8.4/bin
Progress 0/2            Registering library for freer-simple-1.3.0.0..
Progress 0/2            freer-simple> benchmarks
Progress 0/2            Progress 1/2: freer-simple                          Running 1 benchmarks...
Progress 1/2: freer-simple                          Benchmark core: RUNNING...
Progress 1/2: freer-simple                          benchmarking Countdown Bench/countDown
Progress 1/2: freer-simple                          time                 19.19 μs   (19.13 μs .. 19.25 μs)
Progress 1/2: freer-simple                                               1.000 R²   (1.000 R² .. 1.000 R²)
Progress 1/2: freer-simple                          mean                 19.18 μs   (19.13 μs .. 19.26 μs)
Progress 1/2: freer-simple                          std dev              200.2 ns   (125.4 ns .. 365.9 ns)
Progress 1/2: freer-simple                          
Progress 1/2: freer-simple                          Benchmark core: FINISH
Progress 1/2: freer-simple                          Completed 2 action(s).
